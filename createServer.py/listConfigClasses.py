from configClassModel import AdminConfigClass

class ConfigClasses:
    CellConfigSecurity = [
        AdminConfigClass('JAASAuthData')
        .withRequired("alias")
        .withRequired("userId")
        .withRequired("password")
        .withRequired("description")
    ]
    CellResources = [
        AdminConfigClass('DataReplicationDomain')
        .withRequired('name')
        .withAttributeList('defaultDataReplicationSettings', AdminConfigClass('DataReplication')
        .withRequired('numberOfReplicas')
        ),
        AdminConfigClass('VirtualHost')
        .withRequired('name')
        .withAttributeList('aliases', AdminConfigClass('HostAlias')
        .withRequired('hostname')
        .withRequired('port')
        )
        .withAttributeList('mimeTypes', AdminConfigClass('MimeEntry')
        .withRequired('type')
        .withRequired('extensions')
        ),
        AdminConfigClass('SIBus')
        .withRequired('bus', 'name')
        .withRequired('description')
    ]
    ClusterResources = [
        AdminConfigClass('VariableMap')
        .withList('entries', AdminConfigClass('VariableSubstitutionEntry')
        .withRequired('symbolicName')
        .withRequired('value')
        ),
        AdminConfigClass('JDBCProvider')
        .withRequired('providerType')
        .withRequired('implementationClassName')
        .withRequired('name')
        .withRequired('description')
        .withRequired('classpath')
        .withRequired('xa')
        .withList('dataSources', AdminConfigClass('DataSource')
        .withRequired('name')
        .withRequired('jndiName')
        .withRequired('datasourceHelperClassname')
        .withRequired('description')
        .withOptional('authDataAlias')
        .withComplex('connectionPool', AdminConfigClass('ConnectionPool')
        .withRequired('connectionTimeout')
        .withRequired('maxConnections')
        .withRequired('minConnections')
        .withRequired('unusedTimeout')
        )
        .withAttributeList('properties', AdminConfigClass('J2EEResourceProperty')
        .withRequired('name')
        .withRequired('type')
        .withRequired('value')
        )
        ),
        AdminConfigClass('MailProvider')
        .withList('mailSessions', AdminConfigClass('MailSession')
        .withRequired('name')
        .withRequired('jndiName')
        .withRequired('mailTransportHost')
        .withAttributeList('properties', AdminConfigClass('J2EEResourceProperty')
        .withRequired('name')
        .withRequired('value')
        )
        ),
        AdminConfigClass('JMSProvider')
        .withRequired('name')
        .withList('wasqcfs', AdminConfigClass('WASQueueConnectionFactory')
        .withRequired('name')
        .withRequired('jndiName')
        .withRequired('description')
        .withOptional('authDataAlias')
        .withComplex('connectionPool', AdminConfigClass('ConnectionPool')
        .withRequired('connectionTimeout')
        .withRequired('maxConnections')
        .withRequired('minConnections')
        .withRequired('unusedTimeout')
        )
        )
        .withList('wasqs', AdminConfigClass('WASQueue')
        .withRequired('name')
        .withRequired('jndiName')
        )
        .withList('mqcfs', AdminConfigClass('MQQueueConnectionFactory')
        .withRequired('name')
        .withRequired('jndiName')
        )
        .withList('mqs', AdminConfigClass('MQQueue')
        .withRequired('name')
        .withRequired('jndiName')
        .withRequired('baseQueueName')
        ),
        AdminConfigClass('SIBMessagingEngine')
        .withRequired('name')
        .withRequired('busName')
        .withAttributeList('mqClientLink', AdminConfigClass('SIBMQClientLink')
        .withRequired('name')
        .withRequired('channelName')
        .withRequired('qmName')
        ),
        AdminConfigClass('URLProvider')
        .withList('urls', AdminConfigClass('URL')
        .withRequired('name')
        .withRequired('jndiName')
        .withRequired('spec')
        ),
        AdminConfigClass('WorkManagerProvider')
        .withList('factories', AdminConfigClass('WorkManagerInfo')
        .withRequired('name')
        .withRequired('jndiName')
        .withOptional('description')
        .withOptional('isGrowable')
        .withOptional('minThreads')
        .withOptional('maxThreads')
        .withOptional('numAlarmThreads')
        .withOptional('serviceNames')
        .withOptional('threadPriority')
        .withOptional('workTimeout')
        .withOptional('workReqQSize')
        .withOptional('workReqQFullAction')
        .withOptional('isDistributable')
        ),
        AdminConfigClass('CacheProvider')
        .withList('instances', AdminConfigClass('ObjectCacheInstance')
        .withRequired('name')
        .withRequired('jndiName')
        .withRequired('cacheSize')
        .withOptional('replicationType')
        .withOptional('enableCacheReplication')
        .withAttributeList('cacheReplication', AdminConfigClass('DRSSettings')
        .withRequired('dataReplicationMode')
        .withRequired('messageBrokerDomainName')
        )
        ),
        AdminConfigClass('StringNameSpaceBinding')
        .asGroup('NameBindings')
        .withRequired('name')
        .withRequired('nameInNameSpace')
        .withRequired('stringToBind'),
        AdminConfigClass('EjbNameSpaceBinding')
        .asGroup('NameBindings')
        .withRequired('name')
        .withRequired('nameInNameSpace')
        .withRequired('bindingLocation')
        .withOptional('applicationNodeName')
        .withRequired('applicationServerName')
        .withRequired('ejbJndiName'),
        AdminConfigClass('Library')
        .asGroup('SharedLibraries')
        .withRequired('name')
        .withOptional('classPath')
    ]
    ServerConfigServices = [
        AdminConfigClass('SessionManager')
        .withComplex('tuningParams', AdminConfigClass('TuningParams')
        .withRequired('maxInMemorySessionCount')
        .withRequired('invalidationTimeout')
        )
        .withOptional('sessionPersistenceMode')
        .withAttributeList('sessionDRSPersistence', AdminConfigClass('DRSSettings')
        .withRequired('dataReplicationMode')
        .withRequired('messageBrokerDomainName')
        )
        .withOptional('enableUrlRewriting')
        .withOptional('enableCookies')
        .withComplex('defaultCookieSettings', AdminConfigClass('Cookie')
        .withRequired('name')
        .withRequired('domain')
        .withRequired('path')
        ),
        AdminConfigClass('TransactionService')
        .withOptional('propogatedOrBMTTranLifetimeTimeout')
        .withOptional('totalTranLifetimeTimeout')
        .withOptional('clientInactivityTimeout'),
        AdminConfigClass('PMIService')
        .withOptional('initialSpecLevel')
        .withOptional('statisticSet')
        .withOptional('synchronizedUpdate'),
        AdminConfigClass('JavaVirtualMachine')
        .withOptional('initialHeapSize')
        .withOptional('maximumHeapSize')
        .withOptional('genericJvmArguments')
        .withAttributeList('properties', AdminConfigClass('Property')
        .withRequired('name')
        .withRequired('value')
        ),
        AdminConfigClass('WebContainer')
        .withAttributeList('properties', AdminConfigClass('Property')
        .withRequired('name')
        .withRequired('value')
        ),
        AdminConfigClass('DynamicCache')
        .withOptional('enableCacheReplication')
        .withOptional('replicationType')
        .withAttributeList('cacheReplication', AdminConfigClass('DRSSettings')
        .withRequired('dataReplicationMode')
        .withRequired('messageBrokerDomainName')
        ),
        AdminConfigClass('ApplicationServer')
        .withAttributeList('classloaders', AdminConfigClass('Classloader')
        .withRequired('mode')
        .withAttributeList('libraries', AdminConfigClass('LibraryRef')
        .withRequired('libraryName')
        .withRequired('sharedClassloader')
        )
        )
        .withComplex('webserverPluginSettings', AdminConfigClass('WebserverPluginSettings')
        .withRequired('WaitForContinue')
        .withRequired('ConnectTimeout')
        .withRequired('MaxConnections')
        .withRequired('ExtendedHandshake')
        .withRequired('ServerIOTimeout')
        ),
        AdminConfigClass('MessageListenerService')
        .withAttributeList('listenerPorts', AdminConfigClass('ListenerPort')
        .withRequired('name')
        .withRequired('destinationJNDIName')
        .withRequired('connectionFactoryJNDIName')
        )
    ]
    ServerConfigClass = AdminConfigClass('Server').withComplex('outputStreamRedirect',
        AdminConfigClass('StreamRedirect')
        .withRequired('rolloverType')
        .withRequired('maxNumberOfBackupFiles')
        .withRequired('baseHour')
        .withRequired('rolloverPeriod')
    ).withComplex('errorStreamRedirect', AdminConfigClass('StreamRedirect')
    .withRequired('rolloverType')
    .withRequired('maxNumberOfBackupFiles')
    .withRequired('baseHour')
    .withRequired('rolloverPeriod')
    )
    ApplicationDeploymentClass = AdminConfigClass('ApplicationDeployment').withAttributeList('configs',
        AdminConfigClass('ApplicationConfig')
        .withComplex('sessionManagement', AdminConfigClass('SessionManager')
        .withRequired('enableUrlRewriting')
        .withRequired('enableCookies')
        .withComplex('defaultCookieSettings', AdminConfigClass('Cookie')
        .withRequired('name')
        .withRequired('domain')
        .withRequired('path')
        )
        )
    ).withComplex('classloader', AdminConfigClass('Classloader')
    .withRequired('mode')
    .withAttributeList('libraries', AdminConfigClass('LibraryRef')
    .withRequired('libraryName')
    .withRequired('sharedClassloader')
    )
    ).withRequired('binariesURL').withRequired('warClassLoaderPolicy')
    WebModuleDeploymentClass = AdminConfigClass('Module').withAttributeList('configs',
        AdminConfigClass('WebModuleConfig')
        .withComplex('sessionManagement', AdminConfigClass('SessionManager')
        .withRequired('enable')
        .withRequired('enableUrlRewriting')
        .withRequired('enableCookies')
        .withComplex('defaultCookieSettings', AdminConfigClass('Cookie')
        .withRequired('name')
        .withRequired('domain')
        .withRequired('path')
        )
        )
    ).withRequired('uri').withOptional('startingWeight').withOptional('classloaderMode')
    EJBModuleDeploymentClass = AdminConfigClass('Module').withRequired('uri').withOptional('startingWeight')
    NodeConfigResources = [
    ]
